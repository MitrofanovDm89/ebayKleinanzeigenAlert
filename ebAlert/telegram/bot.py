import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
from telegram.constants import ParseMode

from ebAlert.core.config import settings
from ebAlert.crud.base import get_session, crud_link
from ebAlert.crud.post import crud_post
from ebAlert.crud.user import crud_user, crud_user_filter
from ebAlert.ebayscrapping.ebayclass import EbayItemFactory
from ebAlert.models.sqlmodel import EbayLink
from ebAlert.models.user_models import User

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_FILTER, EDITING_FILTER, REMOVING_FILTER = range(4)

class ClientInsightingBot:
    def __init__(self):
        self.application = Application.builder().token(settings.TOKEN).build()
        self.setup_handlers()
        self.logger = logging.getLogger(__name__)
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("filters", self.show_filters))
        self.application.add_handler(CommandHandler("add_filter", self.add_filter_start))
        self.application.add_handler(CommandHandler("remove_filter", self.remove_filter_start))
        self.application.add_handler(CommandHandler("check_now", self.check_now))
        
        # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("add_filter", self.add_filter_start)],
            states={
                ADDING_FILTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_filter_process)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = update.effective_user
        with get_session() as db:
            user = crud_user.create_or_get_user(
                telegram_id=user_info.id,
                username=user_info.username,
                first_name=user_info.first_name,
                last_name=user_info.last_name,
                db=db
            )
        
        welcome_text = f"""
ü§ñ **Client Insighting Bot**

–ü—Ä–∏–≤–µ—Ç, {user_info.first_name or user_info.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ eBay Kleinanzeigen.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/filters` - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã
‚Ä¢ `/add_filter` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
‚Ä¢ `/remove_filter` - –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
‚Ä¢ `/check_now` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä:**
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –ø–æ–∏—Å–∫–∞ —Å eBay Kleinanzeigen
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/add_filter`
3. –í—Å—Ç–∞–≤—å—Ç–µ URL –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="show_filters")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="add_filter")],
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
    async def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/filters` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã
‚Ä¢ `/add_filter` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
‚Ä¢ `/remove_filter` - –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
‚Ä¢ `/check_now` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä:**
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ eBay Kleinanzeigen
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–∏—Å–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ü–µ–Ω–∞, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç.–¥.)
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/add_filter` –∏ –≤—Å—Ç–∞–≤—å—Ç–µ URL

**–ü—Ä–∏–º–µ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤:**
‚Ä¢ –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
‚Ä¢ –¢–æ–≤–∞—Ä—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤

**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
        
    async def show_filters(self, update: Update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._show_filters_list(update, context)
        
    async def _show_filters_list(self, update: Update, context):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        user_info = update.effective_user
        
        with get_session() as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = crud_user.get_by_telegram_id(user_info.id, db)
            if not user:
                await self._send_error_message(update, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filters = crud_user_filter.get_user_filters(user.id, db)
            
        if not filters:
            text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_filter` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞."
            keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="add_filter")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'callback_query'):
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
            return
            
        text = "üìã **–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:**\n\n"
        keyboard = []
        
        for i, filter_item in enumerate(filters, 1):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ URL
            display_name = filter_item.name or filter_item.url[:50] + "..." if len(filter_item.url) > 50 else filter_item.url
            text += f"{i}. **{display_name}**\n"
            if filter_item.name:
                text += f"   `{filter_item.url[:50]}{'...' if len(filter_item.url) > 50 else ''}`\n"
            keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i}", callback_data=f"remove_{filter_item.id}")])
            
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="add_filter")])
        keyboard.append([InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                text, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
    async def add_filter_start(self, update: Update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        text = """
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –ø–æ–∏—Å–∫–∞ —Å eBay Kleinanzeigen.

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å URL:**
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ eBay Kleinanzeigen
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–∏—Å–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ü–µ–Ω–∞, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

**–ü—Ä–∏–º–µ—Ä URL:**
`https://www.kleinanzeigen.de/s-autos/c216`

–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                text, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        return ADDING_FILTER
        
    async def add_filter_process(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        url = update.message.text.strip()
        user_info = update.effective_user
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not url.startswith("https://www.kleinanzeigen.de"):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL! URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `https://www.kleinanzeigen.de`",
                parse_mode=ParseMode.MARKDOWN
            )
            return ConversationHandler.END
            
        try:
            with get_session() as db:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = crud_user.get_by_telegram_id(user_info.id, db)
                if not user:
                    await self._send_error_message(update, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                    return ConversationHandler.END
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_filter = crud_user_filter.get_by_url_and_user(url, user.id, db)
                if existing_filter:
                    await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    return ConversationHandler.END
                    
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                filter_obj = crud_user_filter.create_user_filter(user.id, url, db=db)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                try:
                    ebay_items = EbayItemFactory(url)
                    if ebay_items.item_list:
                        crud_post.add_items_to_db(db, ebay_items.item_list)
                        await update.message.reply_text(
                            f"‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                            f"–ù–∞–π–¥–µ–Ω–æ {len(ebay_items.item_list)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    else:
                        await update.message.reply_text(
                            "‚ö†Ô∏è –§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
                            "–í–æ–∑–º–æ–∂–Ω–æ, URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."
                        )
                except Exception as e:
                    self.logger.error(f"Error processing URL {url}: {e}")
                    await update.message.reply_text(
                        "‚ö†Ô∏è –§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å URL –≤—Ä—É—á–Ω—É—é."
                    )
                    
        except Exception as e:
            self.logger.error(f"Error adding filter: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")
            
        return ConversationHandler.END
        
    async def remove_filter_start(self, update: Update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        await self._show_filters_list(update, context)
        
    async def check_now(self, update: Update, context):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å"""
        user_info = update.effective_user
        
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
        
        new_items = []
        with get_session() as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = crud_user.get_by_telegram_id(user_info.id, db)
            if not user:
                await self._send_error_message(update, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filters = crud_user_filter.get_user_filters(user.id, db)
            
            if not filters:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
                return
                
            for filter_item in filters:
                try:
                    ebay_items = EbayItemFactory(filter_item.url)
                    items = crud_post.add_items_to_db(db=db, items=ebay_items.item_list)
                    new_items.extend(items)
                except Exception as e:
                    self.logger.error(f"Error checking filter {filter_item.url}: {e}")
                    
        if new_items:
            await update.message.reply_text(f"üéâ –ù–∞–π–¥–µ–Ω–æ {len(new_items)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
            for item in new_items[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                await self._send_item_notification(update, item)
                
            if len(new_items) > 5:
                await update.message.reply_text(f"... –∏ –µ—â–µ {len(new_items) - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        else:
            await update.message.reply_text("üì≠ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
    async def _send_item_notification(self, update: Update, item):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        message = f"""
üÜï **–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!**

üìå **{item.title}**

üí∞ **–¶–µ–Ω–∞:** {item.price}
üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {item.city}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {item.description[:100]}{'...' if len(item.description) > 100 else ''}

üîó [–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({item.link})
        """
        
        keyboard = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å", url=item.link)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
    async def button_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "show_filters":
            await self._show_filters_list(update, context)
        elif query.data == "add_filter":
            await self.add_filter_start(update, context)
        elif query.data == "check_now":
            await self.check_now(update, context)
        elif query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        elif query.data.startswith("remove_"):
            filter_id = int(query.data.split("_")[1])
            await self._remove_filter(update, context, filter_id)
            
    async def _remove_filter(self, update: Update, context, filter_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"""
        user_info = update.effective_user
        
        with get_session() as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = crud_user.get_by_telegram_id(user_info.id, db)
            if not user:
                await self._send_error_message(update, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                return
                
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if crud_user_filter.deactivate_filter(filter_id, user.id, db):
                await update.callback_query.edit_message_text("‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                await update.callback_query.edit_message_text("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
    async def cancel(self, update: Update, context):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("Starting Client Insighting Bot...")
        self.application.run_polling()
        
    async def check_filters_periodic(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        while True:
            try:
                with get_session() as db:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    users = db.query(User).filter(User.is_active == True).all()
                    
                    for user in users:
                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        filters = crud_user_filter.get_user_filters(user.id, db)
                        
                        for filter_item in filters:
                            try:
                                ebay_items = EbayItemFactory(filter_item.url)
                                new_items = crud_post.add_items_to_db(db=db, items=ebay_items.item_list)
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                for item in new_items:
                                    await self._send_item_notification_to_user(user, item)
                                    
                            except Exception as e:
                                self.logger.error(f"Error in periodic check for filter {filter_item.url}: {e}")
                                
            except Exception as e:
                self.logger.error(f"Error in periodic check: {e}")
                
            # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
            
    async def _send_item_notification_to_user(self, user: User, item):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        message = f"""
üÜï **–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!**

üìå **{item.title}**

üí∞ **–¶–µ–Ω–∞:** {item.price}
üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {item.city}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {item.description[:100]}{'...' if len(item.description) > 100 else ''}

üîó [–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({item.link})
        """
        
        keyboard = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å", url=item.link)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await self.application.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            self.logger.error(f"Error sending notification to user {user.telegram_id}: {e}")
            
    async def _send_error_message(self, update: Update, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(f"‚ùå {message}")
        else:
            await update.message.reply_text(f"‚ùå {message}")
            
    async def _send_item_notification_to_all_users(self, item):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        message = f"""
üÜï **–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!**

üìå **{item.title}**

üí∞ **–¶–µ–Ω–∞:** {item.price}
üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {item.city}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {item.description[:100]}{'...' if len(item.description) > 100 else ''}

üîó [–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({item.link})
        """
        
        keyboard = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å", url=item.link)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        await self.application.bot.send_message(
            chat_id=settings.CHAT_ID,
            text=message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        ) 